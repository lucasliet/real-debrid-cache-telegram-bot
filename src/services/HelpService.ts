import { MyContext } from '@/types/grammy.d.ts';
import { allowedExtensions } from '@/config/constants.ts';

export class HelpService {
	private static instance: HelpService;

	private constructor() {}

	static getInstance(): HelpService {
		if (!HelpService.instance) {
			HelpService.instance = new HelpService();
		}
		return HelpService.instance;
	}

	async sendWelcome(ctx: MyContext): Promise<void> {
		await ctx.reply(
			`Bem-vindo ao Real-Debrid Cache Bot! üöÄ\n\n` +
				`Este bot ajuda voc√™ a enviar arquivos para o Real-Debrid evitando arquivos RAR.\n\n` +
				`Extens√µes suportadas: ${allowedExtensions.join(', ')}\n\n` +
				`üìå Como usar:\n` +
				`‚Ä¢ Envie um arquivo .torrent\n` +
				`‚Ä¢ Ou envie um link magnet\n\n` +
				`Use /ajuda para mais informa√ß√µes.`,
			{ parse_mode: 'Markdown' },
		);
	}

	async sendHelp(ctx: MyContext): Promise<void> {
		await ctx.reply(
			`üìñ *Instru√ß√µes de Uso*\n\n` +
				`1. Envie um arquivo .torrent ou link magnet\n` +
				`2. O bot ir√°:\n` +
				`   ‚Ä¢ Analisar o conte√∫do\n` +
				`   ‚Ä¢ Processar cada arquivo individualmente (extens√µes suportadas)\n` +
				`   ‚Ä¢ Mostrar o progresso em tempo real\n\n` +
				`üîç Extens√µes suportadas para processamento individual: ${
					allowedExtensions.join(', ')
				}\n\n` +
				`üìã *Comandos Dispon√≠veis*\n` +
				`‚Ä¢ /status\\_torrent - Lista todos os seus torrents com ID e status\n` +
				`‚Ä¢ /status\\_download - Lista todos os seus downloads com ID e tamanho\n` +
				`‚Ä¢ /incomplete - Mostra apenas torrents n√£o baixados\n` +
				`‚Ä¢ /delete\\_torrent <id> - Remove um torrent espec√≠fico\n` +
				`‚Ä¢ /delete\\_download <id> - Remove um link de download espec√≠fico\n` +
				`‚Ä¢ /stream <id> - Mostra links de streaming para um torrent baixado (se dispon√≠vel)\n\n` +
				{ parse_mode: 'Markdown' },
		);
	}

	async sendInvalidFileHelp(ctx: MyContext): Promise<void> {
		await ctx.reply(
			'‚ùå Por favor, envie apenas arquivos .torrent\n\n' +
				'Voc√™ tamb√©m pode enviar links magnet diretamente.\n' +
				'Use /ajuda para mais informa√ß√µes.',
		);
	}

	async sendInvalidMessageHelp(ctx: MyContext): Promise<void> {
		await ctx.reply(
			'‚ùå Mensagem n√£o reconhecida.\n\n' +
				'Por favor, envie:\n' +
				'‚Ä¢ Um arquivo .torrent\n' +
				'‚Ä¢ Ou um link magnet\n\n' +
				'Use /ajuda para mais informa√ß√µes.',
		);
	}
}
